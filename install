#!/bin/sh

prepare() {
	# Determine if system is using UEFI or BIOS
	is_uefi=0
	ls /sys/firmware/efi/efivars > /dev/null && is_uefi=1

	timedatectl set-ntp true && echo "System time synchronized!"
}

download_pkgs() {
	# Update mirrors
	pacman -S reflector
	systemctl enable reflector.timer
	systemctl start reflector.service

	# Install AUR helper
	pacman -S --needed git base-devel
	git clone https://aur.archlinux.org/yay.git
	cd yay
	makepkg -si
	cd ..
	rm -rf yay

	yay -Syu $(cat other.pkgs | tr '\n' ' ')
}

setup_partitions() {
	# TODO: disk partitioning

	# Format and mount partitions
	# TODO: don't hardcode partition numbers
	mkfs.fat -F 32 /dev/$(root_disk)1	# boot partition
	mkfs.ext4 /dev/$(root_disk)2	# root partition
	mount /dev/$(root_disk)2 /mnt
	mkdir /mnt/boot; mount /dev/$(root_disk)1 /mnt/boot

	genfstab -U /mnt >> /mnt/etc/fstab
}

setup_env() {
	download_pkgs
	ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime
	hwclock --systohc
	locale-gen
	echo 'LANG=en_GB.UTF-8' >> /etc/locale.conf
	echo 'KEYMAP=uk' >> /etc/vconsole.conf
	echo '127.0.0.1	localhost\n::1		localhost\n127.0.1.1	"$hostname".localdomain "$hostname"' >> /etc/hosts
}

setup_boot() {
	# Replace mkinitcpio with dracut
	dracut /boot/initramfs-linux.img
	dracut -N /boot/initramfs-linux-fallback.img
	pacman -Rs mkinitcpio

	# TODO: set up EFISTUB booting

	# Install microcode for the appropriate vendor
	vendor=$(cat /proc/cpuinfo | grep vendor_id | uniq | cut -d ' ' -f 2)
	case $vendor in 
		AuthenticAMD)
			pacman -S amd-ucode;;
		GenuineIntel)
			pacman -S intel-ucode;;
	esac
}

improve_fonts() {
	cd /etc/fonts/conf.d
	ln -s ../conf.avail/10-sub-pixel-rgb.conf
	ln -s ../conf.avail/11-lcdfilter-default.conf
	ln -s ../conf.avail/70-no-bitmaps.conf
}

enable_services() {
	systemctl enable nftables.service
	systemctl enable NetworkManager.service
	systemctl enable cups.socket
}

install_dotfiles() {
	cd $HOME
	git clone https://github.com/mzyzc/dotfiles.git
	git submodule update --init --recursive
}

# Record information about the system
hostname=host
disk=/dev/sda


# Ask user for partitioning preferences
fdisk -l
read -p "Auto-partition drive? " answer
case $answer in
	y)
		drive=/dev/sda;;
	n)
		read -p "Enter desired drive name: " drive;;
esac

prepare
setup_partitions

# System preparation
pacstrap /mnt $(cat essential.pkgs | tr '\n' ' ')

# Set up the new environment
arch-chroot /mnt
setup_env
enable_services
improve_fonts
setup_bootloader
passwd

# Finish up
exit
umount -R /mnt
reboot
